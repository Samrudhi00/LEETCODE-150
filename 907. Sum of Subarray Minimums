///////////////////////////////////////////  OPTIMAL  //////////////////////////////////////
/////////////////////////////////////////// USING MONOTONIC STACK  //////////////////////////////////////
class Solution {
public:
    int sumSubarrayMins(vector<int>& arr) {
        long long res =0;
        stack<int> stack;
        long long M = 1e9 + 7;
        stack.push(-1);
        for(int i2=0;i2<arr.size()+1;i2++){
            int currVal = (i2 < arr.size())?arr[i2]:0;
            while(stack.top()!=-1 && currVal < arr[stack.top()]){
                int index = stack.top();
                stack.pop();
                int i1=stack.top();
                int left = index - i1;
                int right = i2 - index;
                long long add = (long long)(left * right * (long long)arr[index]) % M;
                res += add;
                res %= M;
            }
            stack.push(i2);
        }
        return res;

    }
};

///////////////////////////////////////////  BRUTE  //////////////////////////////////////

class Solution {
public:
     int sumSubarrayMins(vector<int>& arr) {
        int n = arr.size(); long long ans = 0;
        stack<int> st; int mod = 1e9+7;
        for(int i = 0;i<=n;i++){
            while(st.size() and (i==n or arr[st.top()]>arr[i])){
                int j = st.top();
                st.pop();
                int k = st.empty()?-1:st.top();
                ans+=(long long) arr[j]*(i-j)*(j-k);
            }
            st.push(i);
        }
        return (int)(ans%mod);
    }
};
